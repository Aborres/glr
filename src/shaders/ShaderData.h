
/**
 * This file is automatically generated.  Changes made to this file will
 * not be reflected after compiling.
 *
 * If you wish to make changes to shader information for Oglre, edit the shaders
 * and the shader program list in the 'data' directory.
 *
 */
namespace oglre {

namespace shaders {

static const std::string SHADER_DATA = std::string(
	R"<STRING>(
{"shaders": [{"variables": [{"in": [{"1": [{"type": "vec2"}, {"name": "in_Texture"}], "0": [{"type": "vec3"}, {"name": "in_Position"}], "2": [{"type": "vec3"}, {"name": "in_Color"}]}]}, {"uniform": [{"1": [{"type": "mat4"}, {"name": "viewMatrix"}], "0": [{"type": "mat4"}, {"name": "projectionMatrix"}], "2": [{"type": "mat4"}, {"name": "modelMatrix"}]}]}], "type": "vertex", "name": "test_vertex_shader", "contents": "#version 150 core\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 modelMatrix;\n\nin vec3 in_Position;\nin vec2 in_Texture;\nin vec3 in_Color;\n\nout vec2 textureCoord;\nout vec3 pass_Color;\n\nvoid main() {\n\t// gl_Position is pre-defined\n\tgl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(in_Position, 1.0);\n\t\n\ttextureCoord = in_Texture;\n\tpass_Color = in_Color;\n}\n", "filename": "shader.vert"}, {"type": "fragment", "name": "test_fragment_shader", "contents": "#version 150 core\n\nuniform sampler2D texture;\n\nin vec3 pass_Color;\nin vec2 textureCoord;\n\nvoid main() {\t\n\tvec4 out_Color = texture2D(texture, textureCoord);\n\t\n\t// gl_FragColor is pre-defined\n\tgl_FragColor = out_Color;\n}\n", "filename": "shader.frag"}], "programs": [{"name": "test", "shaders": [{"name": "test_vertex_shader"}, {"name": "test_fragment_shader"}]}]}

	)<STRING>"
);

}

}	
	