# Glr Tests SConstruct file

import os, sys
import shutil

# Add BuildHelper.py and colorizer.py directory to path
sys.path.append('../')
from colorizer import colorizer
from BuildHelper import *

setup(ARGUMENTS)

def setupDependencies():
	### Set our libraries
	glLib = 'GL'
	glewLib = 'GLEW'
	libPThread = 'pthread'
	cefLib = 'cef'
	cefDllWrapperLib = 'cef_dll_wrapper'
	boostLogLib = 'boost_log'
	boostLogSetupLib = 'boost_log_setup'
	boostDateTimeLib = 'boost_date_time'
	boostThreadLib = 'boost_thread'
	boostWaveLib = 'boost_wave'
	boostRegexLib = 'boost_regex'
	boostFilesystemLib = 'boost_filesystem'
	boostSystemLib = 'boost_system'
	boostUnitTestFrameworkLib = 'boost_unit_test_framework'
	
	if (isWindows):
		glLib = 'opengl32'
		glewLib = 'glew32'
		libPThread = ''
		cefLib = 'libcef'
		cefDllWrapperLib = 'libcef_dll_wrapper'
		boostLogLib = 'libboost_log-vc120-mt-1_55'
		boostLogSetupLib = 'libboost_log_setup-vc120-mt-1_55'
		boostDateTimeLib = 'libboost_date_time-vc120-mt-1_55'
		boostThreadLib = 'libboost_thread-vc120-mt-1_55'
		boostWaveLib = 'libboost_wave-vc120-mt-1_55'
		boostRegexLib = 'libboost_regex-vc120-mt-1_55'
		boostFilesystemLib = 'libboost_filesystem-vc120-mt-1_55'
		boostSystemLib = 'libboost_system-vc120-mt-1_55'
		boostUnitTestFrameworkLib = 'libboost_system-vc120-mt-1_55'

	# Set our required libraries
	libraries.append('glr')
	libraries.append(glLib)
	libraries.append(glewLib)
	libraries.append(libPThread)
	if buildFlags['useCef']:
		libraries.append(cefLib)
		libraries.append(cefDllWrapperLib)
	libraries.append('sfml-system')
	libraries.append('sfml-window')
	libraries.append('assimp')
	libraries.append('freeimage')
	libraries.append(boostLogLib)
	libraries.append(boostLogSetupLib)
	libraries.append(boostDateTimeLib)
	libraries.append(boostThreadLib)
	libraries.append(boostWaveLib)
	libraries.append(boostRegexLib)
	libraries.append(boostFilesystemLib)
	libraries.append(boostSystemLib)
	libraries.append(boostUnitTestFrameworkLib)
	
	if (not isWindows):
		# XInput for linux
		libraries.append( 'Xi' )
	
	### Set our library paths
	library_paths.append('../build')
	library_paths.append('../lib')
	#library_paths.append('../lib_d')

def setupEnvironment(env):
	col = colorizer()
	col.colorize(env)
	
	### Set our environment variables
	env.Append( CPPFLAGS = cpp_flags )
	env.Append( CPPDEFINES = cpp_defines )
	env.Append( CPPPATH = cpp_paths )
	env.Append( LINKFLAGS = link_flags )
	
	env.SetOption('num_jobs', multiprocessing.cpu_count())
	if isLinux:
		# Set our runtime library locations
		env.Append( RPATH = env.Literal(os.path.join('\\$$ORIGIN', '.')))
		
		# include cflags and libs for gtk+-2.0
		if buildFlags['useCef']:
			env.ParseConfig('pkg-config --cflags --libs gtk+-2.0')

def copyResources():
	"""Copies over resources to the build directory.
	"""
	
	#os.chdir( '../dark_horizon' )
	
	if (not os.path.exists('build')):
		os.makedirs('build')
	
	# TODO: Do we want 'data' to be copied over at some point?
	#try:
	#	if (not os.path.exists('./build/data')):
	#		shutil.copytree('data', 'build/data')
	#		os.chmod('build/data', 0755)
	#		print("Copied data");
	#except:
	#	print("Couldn't copy data");
	
	# TODO: Is this where we want cef locale data stored?
	if buildFlags['useCef']:
		try:
			if (not os.path.exists('./build/locales')):
				shutil.copytree('../cef_locales/locales', 'build/locales')
				shutil.copyfile('../cef_locales/cef.pak', 'build/cef.pak')
				shutil.copyfile('../cef_locales/devtools_resources.pak', 'build/devtools_resources.pak')
				os.chmod('build/', 0755)
				print("Copied CEF locale data");
		except:
			print("Couldn't copy CEF locale data");
			
		try:
			binary = 'cef3_client'
			if (isWindows):
				binary = 'cef3_client.exe'
			
			shutil.copyfile('../cef_client/build/' + binary, 'build/' + binary)
			os.chmod('build/' + binary, 0755)
			print("Copied " + binary);
		except:
			print("Couldn't copy cef3_client executable");



### Clear the screen
clear()
if (not isWindows):
	os.system( 'echo' )
	os.system( 'echo' )
	os.system( 'echo' )

### Prepare code for comilation, and compile our dependancy library, glr
if buildFlags['beautify']:
	print("Beautifying Code")
	beautifyCode()
	print("Done")
	print("")


# Tell SCons to create our build files in the 'build' directory
VariantDir('build', 'src', duplicate=0)

# Set our source files
source_files = Glob('build/*.cpp', 'build/*.h')

setupDependencies()

### Create our environment
env = Environment(ENV = os.environ, TOOLS = [buildOptions['compiler']])
setupEnvironment(env)

# Tell SCons the program to build
env.Program('build/glr_tests', source_files, LIBS = libraries, LIBPATH = library_paths)

### Copy all of our required resources to the build directory
copyResources()
