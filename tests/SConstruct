# Glr Tests SConstruct file

import os
import shutil

# Tell SCons to create our build files in the 'build' directory
VariantDir('build', 'src', duplicate=0)

# Set our source files
source_files = Glob('build/*.cpp', 'build/*.h')

source_files = source_files + Glob('build/common/io/*.cpp', 'build/common/io/*.h')
source_files = source_files + Glob('build/common/logging/*.cpp', 'build/common/logging/*.h')
source_files = source_files + Glob('build/common/as_wrapper/*.cpp', 'build/common/as_wrapper/*.h')
source_files = source_files + Glob('build/common/as_wrapper/scriptstdstring/*.cpp', 'build/common/as_wrapper/scriptstdstring/*.h')
source_files = source_files + Glob('build/common/as_wrapper/scriptbuilder/*.cpp', 'build/common/as_wrapper/scriptbuilder/*.h')
source_files = source_files + Glob('build/common/as_wrapper/scriptarray/*.cpp', 'build/common/as_wrapper/scriptarray/*.h')
source_files = source_files + Glob('build/game/*.cpp', 'build/game/*.h')
source_files = source_files + Glob('build/game/angel_script/*.cpp', 'build/game/angel_script/*.h')

#source_files = source_files + Glob('build/common/compatibility/*.cpp', 'build/common/compatibility/*.h')
#source_files = source_files + Glob('build/common/math/*.cpp', 'build/common/math/*.h')
#source_files = source_files + Glob('build/common/utilities/*.cpp', 'build/common/utilities/*.h')
#source_files = source_files + Glob('build/vmath/*.cpp', 'build/vmath/*.h')

#source_files = source_files + Glob('build/engine/*.cpp', 'build/engine/*.h')
#source_files = source_files + Glob('build/linux/*.cpp', 'build/linux/*.h')
#source_files = source_files + Glob('build/osx/*.cpp', 'build/osx/*.h')
#source_files = source_files + Glob('build/windows/*.cpp', 'build/windows/*.h')

# Set our required libraries
libraries = [
'glr',
'sqlite3',
'GL',
'GLEW',
'liblibberkelium_d',
'Xi',
'sfml-window',
'assimp',
'freeimage',
'Angelscript',
'boost_log', 
'boost_date_time', 
'boost_thread',
'boost_wave',
'boost_regex'
]
library_paths = [  
'../build',
]

env = Environment(ENV = os.environ, CCFLAGS=[]) 

# Set our g++ compiler flags
cpp_flags = [
'-std=c++11',
'-Wall',
'-I"../glr/src"',
]

cpp_defines = []

#if (os.name == "nt" or os.name == "win32"):
	#cpp_flags.append( '-I"C:\lib\Assimp\include"' )
	#cpp_flags.append( '-I"C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\include"' )


#debug = ARGUMENTS.get('debug', 0)
#if int(debug):
#	cpp_flags.append('-g')
#	cpp_defines.append('DEBUG')
#else:
#	cpp_defines.append('NDEBUG')
cpp_flags.append('-g')
cpp_flags.append('-O0') # optimization level 0
cpp_defines.append('DEBUG')


# Set our g++ compiler flags
env.Append( CPPFLAGS = cpp_flags )

env.SetOption('num_jobs', 4)

# Tell SCons the program to build
env.Program('build/glr_tests', source_files, LIBS = libraries, LIBPATH = library_paths)


# do some stuff for berkelium
if (not os.path.exists('build')):
	os.makedirs('build')

if (not os.path.exists('./build/berkelium')):
	shutil.copyfile('../../../berkelium/berkelium', './build/berkelium')
	os.chmod('./build/berkelium', 0755)

if (not os.path.exists('./build/chrome.pak')):
	shutil.copyfile('../../../berkelium/build/chromium/src/out/Release/chrome.pak', 'build/chrome.pak')
	os.chmod('build/chrome.pak', 0755)

if (not os.path.exists('./build/locales')):
	shutil.copytree('../../../berkelium/build/chromium/src/out/Release/locales', 'build/locales')
	os.chmod('build/locales', 0755)
