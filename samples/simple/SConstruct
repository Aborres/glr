#! /bin/python
import os, sys
import shutil
import platform

# Add BuildHelper.py directory to path
sys.path.append('../../')

from colorizer import colorizer
from BuildHelper import *

setup(ARGUMENTS)

def setupDependencies():
	### Set our libraries
	glLib = 'GL'
	glewLib = 'GLEW'
	libPThread = 'pthread'
	cefLib = 'cef'
	cefDllWrapperLib = 'cef_dll_wrapper'
	angelscriptLib = 'Angelscript'
	boostLogLib = 'boost_log'
	boostLogSetupLib = 'boost_log_setup'
	boostDateTimeLib = 'boost_date_time'
	boostChronoLib = 'boost_chrono'
	boostThreadLib = 'boost_thread'
	boostWaveLib = 'boost_wave'
	boostRegexLib = 'boost_regex'
	boostProgramOptionsLib = 'boost_program_options'
	boostFilesystemLib = 'boost_filesystem'
	boostSystemLib = 'boost_system'
	
	
	if (isWindows):
		glLib = 'opengl32'
		glewLib = 'glew32'
		libPThread = ''
		angelscriptLib = 'Angelscript'
		cefLib = 'libcef'
		cefDllWrapperLib = 'libcef_dll_wrapper'
		boostLogLib = 'libboost_log-vc120-mt-1_55'
		boostLogSetupLib = 'libboost_log_setup-vc120-mt-1_55'
		boostDateTimeLib = 'libboost_date_time-vc120-mt-1_55'
		boostChronoLib = 'libboost_chrono-vc120-mt-1_55'
		boostThreadLib = 'libboost_thread-vc120-mt-1_55'
		boostWaveLib = 'libboost_wave-vc120-mt-1_55'
		boostRegexLib = 'libboost_regex-vc120-mt-1_55'
		boostProgramOptionsLib = 'libboost_program_options-vc120-mt-1_55'
		boostFilesystemLib = 'libboost_filesystem-vc120-mt-1_55'
		boostSystemLib = 'libboost_system-vc120-mt-1_55'


	# Set our required libraries
	libraries.append('glr')
	libraries.append('sqlite3')
	libraries.append(glLib)
	libraries.append(glewLib)
	libraries.append(libPThread)
	libraries.append(cefLib)
	libraries.append(cefDllWrapperLib)
	libraries.append('sfml-system')
	libraries.append('sfml-window')
	libraries.append('assimp')
	libraries.append('freeimage')
	libraries.append(angelscriptLib)
	libraries.append(boostLogLib)
	libraries.append(boostLogSetupLib)
	libraries.append(boostDateTimeLib)
	libraries.append(boostChronoLib)
	libraries.append(boostThreadLib)
	libraries.append(boostWaveLib)
	libraries.append(boostRegexLib)
	libraries.append(boostProgramOptionsLib)
	libraries.append(boostFilesystemLib)
	libraries.append(boostSystemLib)
	
	if (not isWindows):
		# XInput for linux
		libraries.append( 'Xi' )
	
	### Set our library paths
	library_paths.append('../../' + dependenciesDirectory + 'sfml/lib')
	library_paths.append('../../' + dependenciesDirectory + 'assimp/lib')
	library_paths.append('../../' + dependenciesDirectory + 'boost/lib')
	library_paths.append('../../' + dependenciesDirectory + 'freeimage/lib')
	library_paths.append('../../' + dependenciesDirectory + 'cef3/Release')

	library_paths.append('../../build')
	library_paths.append('../../lib')
	#library_paths.append('../lib_d')

def setupEnvironment(env):
	col = colorizer()
	col.colorize(env)
	
	### Set our environment variables
	env.Append( CPPFLAGS = cpp_flags )
	env.Append( CPPDEFINES = cpp_defines )
	env.Append( CPPPATH = cpp_paths )
	env.Append( LINKFLAGS = link_flags )
	
	env.SetOption('num_jobs', buildFlags['num_jobs'])

	if isLinux:
		# Set our runtime library locations
		env.Append( RPATH = env.Literal(os.path.join('\\$$ORIGIN', '.')))
		
		# include cflags and libs for gtk+-2.0
		if (buildFlags['useCef']):
			env.ParseConfig('pkg-config --cflags --libs gtk+-2.0')



# Tell SCons to create our build files in the 'build' directory
VariantDir('build', 'src', duplicate=0)

# Set our source files
source_files = Glob('build/*.cpp')

setupDependencies()

### Create our environment
env = Environment(ENV = os.environ, TOOLS = [buildOptions['compiler']])
setupEnvironment(env)

# Tell SCons the program to build
env.Program('build/simple', source_files, LIBS = libraries, LIBPATH = library_paths)
