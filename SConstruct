#! /bin/python
# Graphics Language Renderer (glr) SConstruct file
import subprocess, sys, os
import platform
import platform
import glob
import json
import shutil
import shlex
import argparse
import multiprocessing

from colorizer import colorizer
from BuildHelper import *



setup(ARGUMENTS)

def setupDependencies():
	### Set our libraries
	glLib = 'GL'
	glewLib = 'GLEW'
	libPThread = 'pthread'
	cefLib = 'cef'
	cefDllWrapperLib = 'cef_dll_wrapper'
	boostLogLib = 'boost_log'
	boostLogSetupLib = 'boost_log_setup'
	boostDateTimeLib = 'boost_date_time'
	boostThreadLib = 'boost_thread'
	boostWaveLib = 'boost_wave'
	boostRegexLib = 'boost_regex'
	boostFilesystemLib = 'boost_filesystem'
	boostSystemLib = 'boost_system'
	
	if (isWindows):
		glLib = 'opengl32'
		glewLib = 'glew32'
		libPThread = ''
		cefLib = 'libcef'
		cefDllWrapperLib = 'libcef_dll_wrapper'
		boostLogLib = 'libboost_log-vc120-mt-1_55'
		boostLogSetupLib = 'libboost_log_setup-vc120-mt-1_55'
		boostDateTimeLib = 'libboost_date_time-vc120-mt-1_55'
		boostThreadLib = 'libboost_thread-vc120-mt-1_55'
		boostWaveLib = 'libboost_wave-vc120-mt-1_55'
		boostRegexLib = 'libboost_regex-vc120-mt-1_55'
		boostFilesystemLib = 'libboost_filesystem-vc120-mt-1_55'
		boostSystemLib = 'libboost_system-vc120-mt-1_55'


	# Set our required libraries
	libraries.append(glLib)
	libraries.append(glewLib)
	libraries.append(libPThread)
	if (buildFlags['useCef']):
		libraries.append(cefLib)
		libraries.append(cefDllWrapperLib)
	libraries.append('assimp')
	libraries.append('freeimage')
	libraries.append(boostLogLib)
	libraries.append(boostLogSetupLib)
	libraries.append(boostDateTimeLib)
	libraries.append(boostThreadLib)
	libraries.append(boostWaveLib)
	libraries.append(boostRegexLib)
	libraries.append(boostFilesystemLib)
	libraries.append(boostSystemLib)
	
	if (not isWindows):
		# XInput for linux
		libraries.append( 'Xi' )
	
	### Set our library paths
	library_paths.append('../glr/build')
	library_paths.append('./lib')
	#library_paths.append('./lib_d')

	cpp_defines.append( ('PACKAGE_VERSION', '\\"0.0.1\\"' ) )
	cpp_defines.append( ('PACKAGE_BUGREPORT', '\\"https://github.com/jarrettchisholm/glr/issues\\"') )

def setupEnvironment(env):
	col = colorizer()
	col.colorize(env)
	
	### Set our environment variables
	env.Append( CPPFLAGS = cpp_flags )
	env.Append( CPPDEFINES = cpp_defines )
	env.Append( CPPPATH = cpp_paths )
	env.Append( LINKFLAGS = link_flags )
	
	env.SetOption('num_jobs', multiprocessing.cpu_count())
	if isLinux:
		# Set our runtime library locations
		env.Append( RPATH = env.Literal(os.path.join('\\$$ORIGIN', '.')))
		
		# include cflags and libs for gtk+-2.0
		if (buildFlags['useCef']):
			env.ParseConfig('pkg-config --cflags --libs gtk+-2.0')

def parseShadersIntoHeader():
	"""Parse the OpenGL Shader files into a single C++ Header file."""
	print('Parsing Shaders into header ShaderData.h')
	
	shaderDataOutputFilename = "ShaderData.h"
	
	# Will ultimately give something like 'data/shaders/' or 'data\shaders\'
	# Note that the last '\' or '/' is important, as we use this to strip the filename of directory information
	shaderListLocation = os.path.join("data", "shaders", "")
	
	
	fileList = glob.glob( os.path.join(shaderListLocation, '*') )
	
	file = open(fileList[0], 'r')
	data = file.read()
	
	# Save shader data as a map of std::string objects in the file ShaderData.h
	shaderDataFile = open( os.path.join('src/glw/shaders', shaderDataOutputFilename), 'w' )
	
	cpp = """
/**
 * This file is automatically generated.  Changes made to this file will
 * not be reflected after compiling.
 *
 * If you wish to make changes to shader information for Glr, edit the shaders
 * and shader programs in the 'data/shaders/' directory.
 *
 */
 
#include <map> 
 
namespace glr {

namespace shaders {

static std::map<std::string, std::string> SHADER_DATA = {
"""
	current = 0
	for filename in fileList:
		file = open(filename, 'r')
		data = file.read()
		
		if (current > 0):
			cpp += ", "
		
		cpp += """
{\""""
		filename = filename.replace(shaderListLocation, "")
		filename = filename.replace(".glsl", "")
		cpp += filename
		
		cpp +="""\", std::string(
	R"<STRING>(
"""

		cpp += data
		cpp += """
)<STRING>"
)}	
"""
		current += 1
	
	cpp += """
};

}

}
"""
		
	shaderDataFile.write(cpp)
	shaderDataFile.close()
	
	print('Done parsing Shaders into header ShaderData.h')

def compileCefClient(compiler):
	os.chdir( 'cef_client' )
	buildCommand = 'scons'
	if (compiler):
		buildCommand = buildCommand + " compiler="+compiler
	if (buildFlags['clean']):
		buildCommand = buildCommand + " --clean"
	buildCommand = buildCommand + " buildType=" + buildFlags['buildType']
	
	result = subprocess.call( buildCommand, shell=True )
	os.chdir( '..' )
	return result



### Clear the screen
clear()
if (not isWindows):
	os.system( 'echo' )
	os.system( 'echo' )
	os.system( 'echo' )



### Prepare code for comilation
if buildFlags['beautify']:
	print("Beautifying Code")
	beautifyCode()
	print("Done")
	print("")



### Compile our client for CEF
if (buildFlags['useCef']):
	print("Compiling CEF Client")
	exitOnError( compileCefClient(compiler) )
	print("")



# Parse our shader programs and create .h files out of them
parseShadersIntoHeader()



# Tell SCons to create our build files in the 'build' directory
VariantDir('build', 'src', duplicate=0)

### Set our source files
source_files = Glob('build/*.cpp', 'build/*.h')

source_files = source_files + Glob('build/common/compatibility/*.cpp', 'build/common/compatibility/*.h')
source_files = source_files + Glob('build/common/math/*.cpp', 'build/common/math/*.h')
source_files = source_files + Glob('build/common/logger/*.cpp', 'build/common/logger/*.h')
source_files = source_files + Glob('build/common/utilities/*.cpp', 'build/common/utilities/*.h')
source_files = source_files + Glob('build/common/io/*.cpp', 'build/common/io/*.h')
#source_files = source_files + Glob('build/vmath/*.cpp', 'build/vmath/*.h')

source_files = source_files + Glob('build/*.cpp', 'build/*.h')
source_files = source_files + Glob('build/exceptions/*.cpp', 'build/exceptions/*.h')
source_files = source_files + Glob('build/gui/*.cpp', 'build/gui/*.h')
source_files = source_files + Glob('build/gui/cef/*.cpp', 'build/gui/cef/*.h')
source_files = source_files + Glob('build/models/*.cpp', 'build/models/*.h')

# OpenGL Wrapper stuff
source_files = source_files + Glob('build/glw/*.cpp', 'build/glw/*.h')
source_files = source_files + Glob('build/glw/shaders/*.cpp', 'build/glw/shaders/*.h')

setupDependencies()

### Create our environment
env = Environment(ENV = os.environ, TOOLS = [compiler])
setupEnvironment(env)

print("Build type: " + buildFlags['buildType'])

### Tell SCons the library to build
env.StaticLibrary('build/glr', source_files, LIBS = libraries, LIBPATH = library_paths)
