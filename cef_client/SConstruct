#! /bin/python

import subprocess, sys, os
import glob
import multiprocessing
import platform
import shutil

# Add BuildHelper.py directory to path
sys.path.append('../')

from colorizer import colorizer
from BuildHelper import *

setup(ARGUMENTS)



def copyResources():
	"""Copies over resources to the build directory.
	"""
	
	if (not os.path.exists('build')):
		os.makedirs('build')
	
	try:
		files = glob.iglob(os.path.join('lib', "libcef.*"))
		for file in files:
		    if os.path.isfile(file) and not os.path.exists('./build/' + file):
		        shutil.copy2(file, './build/')
	except:
		print("Couldn't copy cef library")

def setupDependencies():
	### Set our required libraries
	cefLib = 'cef'
	cefDllWrapperLib = 'cef_dll_wrapper'
	boostLogLib = 'boost_log'
	boostLogSetupLib = 'boost_log_setup'
	boostDateTimeLib = 'boost_date_time'
	boostChronoLib = 'boost_chrono'
	boostSystemLib = 'boost_system'
	boostFilesystemLib = 'boost_filesystem'
	boostThreadLib = 'boost_thread'
	
	if (isWindows):
		cefLib = 'libcef'
		cefDllWrapperLib = 'libcef_dll_wrapper'
		boostLogLib = 'libboost_log-vc120-mt-1_55'
		boostLogSetupLib = 'libboost_log_setup-vc120-mt-1_55'
		boostDateTimeLib = 'libboost_date_time-vc120-mt-1_55'
		boostChronoLib = 'libboost_chrono-vc120-mt-1_55'
		boostSystemLib = 'libboost_system-vc120-mt-1_55'
		boostFilesystemLib = 'libboost_filesystem-vc120-mt-1_55'
		boostThreadLib = 'libboost_thread-vc120-mt-1_55'


	# Set our required libraries
	libraries.append(cefLib)
	libraries.append(cefDllWrapperLib)
	libraries.append(boostLogLib)
	libraries.append(boostLogSetupLib)
	libraries.append(boostDateTimeLib)
	libraries.append(boostChronoLib)
	libraries.append(boostSystemLib);
	libraries.append(boostFilesystemLib)
	libraries.append(boostThreadLib);
	
	### Set our library paths
	library_paths.append('../' + dependenciesDirectory + 'assimp/lib')
	library_paths.append('../' + dependenciesDirectory + 'boost/lib')
	library_paths.append('../' + dependenciesDirectory + 'freeimage/lib')
	library_paths.append('../' + dependenciesDirectory + 'cef3/Release')

	library_paths.append('../lib')
	#library_paths.append('../lib_d')

def setupEnvironment(env):
	col = colorizer()
	col.colorize(env)
	
	### Set our environment variables
	env.Append( CPPFLAGS = cpp_flags )
	env.Append( CPPDEFINES = cpp_defines )
	env.Append( CPPPATH = cpp_paths )
	env.Append( LINKFLAGS = link_flags )
	
	env.SetOption('num_jobs', multiprocessing.cpu_count())
	if isLinux:
		# Set our runtime library locations
		env.Append( RPATH = env.Literal(os.path.join('\\$$ORIGIN', '.')))
		
		# include cflags and libs for gtk+-2.0
		env.ParseConfig('pkg-config --cflags --libs gtk+-2.0')



### Handle arguments

### Argument flags
doBeautification = False

if GetOption('beautify'):
	doBeautification = True

if doBeautification:
	print("Beautifying Code")
	beautifyCode()
	print("Done")
	print("")
	
print("Compiling cef_client")





# Tell SCons to create our build files in the 'build' directory
VariantDir('build', 'src', duplicate=0)

### Set our source files
source_files = Glob('build/*.cpp')
source_files += Glob('build/common/logger/*.cpp')

# For glr/cef_client include files
cpp_paths.append('include')

setupDependencies()

### Create our environment
env = Environment(ENV = os.environ, TOOLS = [buildOptions['compiler']])
setupEnvironment(env)
#env['ENV']['TERM'] = os.environ['TERM']
#env["CXX"] = "clang++"

print("Build type: " + buildFlags['buildType'])

# Tell SCons to build
env.Program('build/cef3_client', source_files, LIBS = libraries, LIBPATH = library_paths)

### Copy all of our required resources to the build directory
copyResources()
